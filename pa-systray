#!/usr/bin/env python
# -*- coding: utf-8 -*-
############################################################################
#
#  Copyright © 2012 IOhannes m zmölnig <zmoelnig@umlaeute.mur.at>.
#        forum::für::umläute
#
#  pa-trayicon is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of
#  the License, or (at your option) any later version.
#
#  pa-trayicon is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this program; if not, see <http://www.gnu.org/licenses/>.
#
############################################################################
# This is only needed for Python v2 but is harmless for Python v3.
#import sip
#sip.setapi('QVariant', 2)
from PySide import QtCore, QtGui

from subprocess import call
from time import sleep

imagepath = "images"

class PulseAudio:
    pa = "pulseaudio"
    
    #def __init__(self):
    #    #print "Pulse"

    def check(self):
        retval = call([self.pa, "--check"])
        #print "Pulse checked %d" % (retval)
        return retval

    def start(self):
        retval = call([self.pa, "--start"])
        #print "Pulse started %d" % (retval)

    def stop(self):
        retval = call([self.pa, "--kill"])
        #print "Pulse stopped %d" % (retval)

class PAmonitor(QtCore.QThread):
    dataReady = QtCore.Signal(int)
    
    def __init__ (self,pa,win,interval=1):
        QtCore.QThread.__init__(self)
        self.pa=pa
        self.win=win
        self.interval=interval

    def run(self):
        while True:
            state=self.pa.check()
            self.dataReady.emit(state)
            sleep(self.interval)

        
class Window(QtGui.QDialog):
    def __init__(self):
        super(Window, self).__init__()
        self.pa = PulseAudio()
        self.createIconGroupBox()
        self.createActions()
        self.createTrayIcon()
        self.iconComboBox.currentIndexChanged[int].connect(self.setIcon)
        self.trayIcon.activated.connect(self.iconActivated)
        self.setIcon(0)
        self.trayIcon.show()
        self.monitor = PAmonitor(self.pa, self)
        self.monitor.dataReady.connect(self.status, QtCore.Qt.QueuedConnection)
        self.monitor.start()

    def start(self):
        self.pa.start()

    def stop(self):
        self.pa.stop()

    def status(self, state):
        self.setIcon(state)

    def setIcon(self, index):
        #print index
        icon = self.iconComboBox.itemIcon(index)
        self.trayIcon.setIcon(icon)
        self.setWindowIcon(icon)
        self.trayIcon.setToolTip(self.iconComboBox.itemText(index))

    def iconActivated(self, reason):
        if reason in (QtGui.QSystemTrayIcon.Trigger, QtGui.QSystemTrayIcon.DoubleClick):
            if self.pa.check() == 0:
                self.pa.stop()
            else:
                self.pa.start()

    def createIconGroupBox(self):
        self.iconGroupBox = QtGui.QGroupBox("Tray Icon")
        self.iconLabel = QtGui.QLabel("Icon:")
        self.iconComboBox = QtGui.QComboBox()
        self.iconComboBox.addItem(QtGui.QIcon(imagepath+'/running.svg'), "pulseaudio running")
        self.iconComboBox.addItem(QtGui.QIcon(imagepath+'/stopped.svg'), "pulseaudio stopped")
        self.showIconCheckBox = QtGui.QCheckBox("Show icon")
        self.showIconCheckBox.setChecked(True)
        iconLayout = QtGui.QHBoxLayout()
        iconLayout.addWidget(self.iconLabel)
        iconLayout.addWidget(self.iconComboBox)
        iconLayout.addStretch()
        iconLayout.addWidget(self.showIconCheckBox)
        self.iconGroupBox.setLayout(iconLayout)

    def quit(self):
        self.monitor.exit()
        QtGui.qApp.quit();

    def createActions(self):
        self.startAction = QtGui.QAction("Start", self,
                triggered=self.start)
        self.stopAction = QtGui.QAction("Stop", self,
                triggered=self.stop)
        self.quitAction = QtGui.QAction("&Quit", self,
                triggered=self.quit)

    def createTrayIcon(self):
         self.trayIconMenu = QtGui.QMenu(self)
         self.trayIconMenu.addAction(self.startAction)
         self.trayIconMenu.addAction(self.stopAction)
         self.trayIconMenu.addSeparator()
         self.trayIconMenu.addAction(self.quitAction)
         self.trayIcon = QtGui.QSystemTrayIcon(self)
         self.trayIcon.setContextMenu(self.trayIconMenu)

if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    if not QtGui.QSystemTrayIcon.isSystemTrayAvailable():
        QtGui.QMessageBox.critical(None, "Systray",
                "I couldn't detect any system tray on this system.")
        sys.exit(1)
    QtGui.QApplication.setQuitOnLastWindowClosed(False)
    window = Window()
    #window.show()
    sys.exit(app.exec_())
